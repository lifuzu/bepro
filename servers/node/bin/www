#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var config = require('../config');
var debug = require('debug')('node:server');
var http = require('http');
var RED = require('node-red');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Node-RED server.
 */

// Create the settings object - see default settings.js file for other options
var settings = {
  httpAdminRoot:"/red",
  httpNodeRoot: "/red/api",
  userDir: require('path').join(require('os').homedir(), ".nodered"),
  functionGlobalContext: { }    // enables global context
};

// Initialise the runtime with a server and settings
RED.init(server, settings);

// Serve the editor UI from /red
app.use(settings.httpAdminRoot, RED.httpAdmin);

// Serve the http nodes UI from /red/api
app.use(settings.httpNodeRoot, RED.httpNode);

// Start the runtime
RED.start();


/**
 * Create Socket.io server.
 */
var io = require('socket.io')(server);
io.of('/time').on('connection', function(socket){
  socket.on('subscribeToTimer', (interval) => {
    console.log('client is subscribing to timer with interval ', interval);
    setInterval(() => {
      socket.emit('timer', new Date());
    }, interval);
  });
});
io.on('connection', function(socket){
  socket.on('event', function(data){
    console.log('event - ', JSON.stringify(data));
  });
  socket.on('disconnect', function(){
    console.log('disconnected');
  });
});
app.set('io', io);
// Usage: var io = req.app.get('io');

/**
 * Create Wechaty service
 */
const { Wechaty, Room, MediaMessage } = require('wechaty');
const wechat = Wechaty.instance()

io.of('/wechat').on('connection', function(socket){
  socket.on('disconnect', function(){
    console.log('disconnected');
  });
});

wechat.on('scan', (url, code) => {
  if (!/201|200/.test(String(code))) {
    console.log(`Scan QR code to login: ${code}\n${url}`)
    io.of('/wechat').emit('scan', url);
  }
})
.on('login', user => console.log(`User ${user} logined`))
.on('message', message => console.log(`Message: ${message}`))
.start()
.catch(async function(e) {
  await wechat.stop()
})
app.set('wechat', wechat);

/**
 * Create Jenkins client.
 */
var jenkins = require('jenkins')({
  baseUrl: config.jenkins.protocol + '://' + config.jenkins.username + ':' + config.jenkins.password + '@' + config.jenkins.uri + ':' + config.jenkins.port,
  crumbIssuer: true
});
app.set('jenkins', jenkins);



// catch 404 and forward to error handler
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
